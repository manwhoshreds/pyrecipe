#!/usr/bin/env python
# -*- encoding: UTF-8 -*-
# PYTHON_ARGCOMPLETE_OK

import os
import sys
import argparse
import subprocess

import pyrecipe.recipe as recipe
import argcomplete


def dump_data(args):
	r = recipe.Recipe(args.source)

	if args.print_yaml:
		r.print_yaml()
		exit(0)
	if args.print_xml:
		r.process_xml()
		exit(0)
	

def print_shopping_list(args):
	
	if args.random:
		rr = recipe.ShoppingList()
		rr.random_recipes(args.random)
	else:
		menu_items = args.recipes	
		if len(menu_items) == 0:
			sys.exit('You must supply at least one recipe'
					 ' to build your shopping list from!')
		
		sl = recipe.ShoppingList()
		
		for item in menu_items:
			sl.update(item)
				
		sl.print_list()


#def print_random_shopping_list(random_count):
#	rr = recipe.ShoppingList()
#	rr.random_recipes(random_count)

def recipe_completer(**kwargs):
	recipe_list = recipe.list_recipes(ret=True)

	return recipe_list

def print_recipe(args):
	if args.source.title() not in recipe.list_recipes(ret=True):
		print("No recipe found for {}".format(args.source))
	else:
		r = recipe.Recipe(args.source)
		r.print_recipe(args.verbose_out)

def delete_recipe(args):
	source = args.source
	file_name = str(recipe.Recipe(source))
	answer = input("Are you sure your want to delete {}? yes/no ".format(source))
	if answer.strip() == 'yes':
		os.remove(file_name)
	else:
		print("{} not deleted".format(source))



def edit_recipe(args):
	if args.source.title() not in recipe.list_recipes(ret=True):
		print("No recipe found for {}".format(args.source))
	else:
		file_name = args.source.replace(" ", "_").lower() + ".recipe"
		abspath_file_name = recipe.RECIPE_DATA_DIR + file_name
		subprocess.call([recipe.EDITOR, abspath_file_name])

def add_recipe(args):
	if args.name.title() in recipe.list_recipes(ret=True):
		sys.exit('A recipe with that name already exist in the recipe store')
	else:
		recipe.template(args.name)


def print_list(args):
	recipe.list_recipes()


def export_recipes(args):
	pass
	

def parse_args():
	parser = argparse.ArgumentParser(
		description="recipe_tool *The Python recipe management program* \
		             Works with recipe files written in yaml.",
		add_help=False
	)
	
	parser.add_argument(
		"-h", "--help",
		action='help',
		help='Show this help message and quit'
		
	)
	parser.add_argument(
		"-v", 
		"--verbose", 
		dest="verbose_out", 
		action="count", 
		default=0,
		help="Verbose output. Use -vv to increase verbosity"
	)
	parser.add_argument(
		"-V", 
		"--version", 
		dest="version", 
		action="store_true", 
		help="Print version and exit"
	)

	# subparsers start here
	subparser = parser.add_subparsers()

	# recipe_tool print
	parser_print = subparser.add_parser("print", help="Print the recipe to screen")
	parser_print.add_argument("source", help="Recipe to print").completer = recipe_completer
	parser_print.set_defaults(func=print_recipe)
	
	# recipe_tool list
	parser_list = subparser.add_parser("list", help="List recipes")
	parser_list.set_defaults(func=print_list)

	# recipe_tool edit	
	parser_edit = subparser.add_parser("edit", help="Edit a recipe data file")
	parser_edit.add_argument("source", type=str, help="Recipe to edit").completer = recipe_completer
	parser_edit.set_defaults(func=edit_recipe)

	# recipe_tool add
	parser_add = subparser.add_parser("add", help='Add a recipe')
	parser_add.add_argument("name", help='Name of the recipe to add')
	parser_add.set_defaults(func=add_recipe)

	# recipe_tool remove
	parser_remove = subparser.add_parser("remove", help='Delete a recipe')
	parser_remove.add_argument("source", help='Recipe, to delete')
	parser_remove.set_defaults(func=delete_recipe)

	# recipe_tool shop
	parser_shop = subparser.add_parser("shop", help='Make a shopping list')
	parser_shop.add_argument(
		"recipes",
		nargs="*",
		help='List of recipe to compile shopping list'
	).completer = recipe_completer
	parser_shop.add_argument(
		"-r", 
		"--random", 
		nargs='?', 
		const=recipe.RAND_RECIPE_COUNT, 
		type=int , 
		metavar="NUM", 
		dest="random", 
		help="Pick n random recipes for the week"
	)
	parser_shop.set_defaults(func=print_shopping_list)

	# recipe_tool show
	parser_show = subparser.add_parser(
		"show",
		help='Show information about recipes'
	)
	parser_show.set_defaults(func=recipe.stats)

	# recipe_tool dump
	parser_dump = subparser.add_parser(
		"dump",
		help="Dump yaml or xml representation of recipe"
	) 
	parser_dump.add_argument(
		"source",
		help="Recipe to dump data from"
		).completer = recipe_completer
	parser_dump.add_argument(
		"-x", 
		"--xml", 
		dest="print_xml", 
		action="store_true", 
		help="Dump sorce xml tree to standard output"
	)
	parser_dump.add_argument(
		"-y", 
		"--yaml", 
		dest="print_yaml", 
		action="store_true", 
		help="Dump source yaml to standard output"
	)
	parser_dump.set_defaults(func=dump_data)

	# recipe_tool export
	parser_export = subparser.add_parser(
		"export",
		help="Export recipes in xml format"
	)
	parser_export.set_defaults(func=export_recipes)
	

	
	# Print help if no arguments given
	if len(sys.argv) == 1:
		parser.print_help()
	
	argcomplete.autocomplete(parser)
	return parser.parse_args()




def main():
	"""Main entry point of recipe_tool"""
	args = parse_args()

	
	if args.version:
		recipe.version()
		exit(0)
	if hasattr(args, 'func'):
		args.func(args)


if __name__ == '__main__':
	main()
		
