#!/usr/bin/env python
# -*- encoding: UTF-8 -*-
# PYTHON_ARGCOMPLETE_OK

import argparse
import argcomplete

from pyrecipe.config import RAND_RECIPE_COUNT
from pyrecipe import manifest

def recipe_completer(**kwargs):
    recipe_list = [x.lower() for x in manifest.recipe_names]
    return recipe_list

def parse_args():
    parser = argparse.ArgumentParser(
        description="Recipe_tool has tab completion functionality. After adding a recipe, \
                     simply run recipe_tool print <TAB><TAB> to view whats available.",
        add_help=False
    )
    parser.add_argument(
        "-h", "--help",
        action='help',
        help='Show this help message and quit'
    )
    parser.add_argument(
        "-v", 
        "--verbose", 
        dest="verbose", 
        action="count", 
        default=0,
        help="Verbose output. Use -vv to increase verbosity"
    )
    parser.add_argument(
        "-V", 
        "--version", 
        dest="version", 
        action="store_true", 
        help="Print version and exit"
    )
    parser.add_argument(
        "-g",
        "--gui-mode",
        dest="guimode",
        action="store_true",
        help="Start the gui frontend to pyrecipe"
    )

    # subparsers start here
    subparser = parser.add_subparsers(dest='subparser')

    # recipe_tool print
    parser_print = subparser.add_parser("print", help="Print the recipe to screen")
    parser_print.add_argument("source", help="Recipe to print").completer = recipe_completer
    
    # recipe_tool list
    parser_list = subparser.add_parser("list", help="List recipes")
  
    # recipe_tool edit	
    parser_edit = subparser.add_parser("edit", help="Edit a recipe data file")
    parser_edit.add_argument("source", type=str, help="Recipe to edit").completer = recipe_completer
    
    # recipe_tool add
    parser_add = subparser.add_parser("add", help='Add a recipe')
    parser_add.add_argument("name", help='Name of the recipe to add')

    # recipe_tool remove
    parser_remove = subparser.add_parser("remove", help='Delete a recipe')
    parser_remove.add_argument("source", help='Recipe, to delete').completer = recipe_completer

    # recipe_tool shop
    parser_shop = subparser.add_parser("shop", help='Make a shopping list')
    parser_shop.add_argument(
        "recipes",
        nargs="*",
        help='List of recipe to compile shopping list'
    ).completer = recipe_completer
    parser_shop.add_argument(
        "-r", 
        "--random", 
        nargs='?', 
        const=RAND_RECIPE_COUNT, 
        type=int , 
        metavar="NUM", 
        dest="random", 
        help="Pick n random recipes for the week"
    )
    parser_shop.add_argument(
        "-w",
        "--write",
        dest="write",
        action="store_true",
        help="Write the shopping list to an xml file"
    )

    # recipe_tool show
    parser_show = subparser.add_parser(
        "show",
        help='Show information about recipes'
    )

    # recipe_tool dump
    parser_dump = subparser.add_parser(
        "dump",
        help="Dump yaml or xml representation of recipe stdout"
    ) 
    parser_dump.add_argument(
        "source",
        help="Recipe to dump data from"
    ).completer = recipe_completer
    parser_dump.add_argument(
        "-x", 
        "--xml", 
        dest="data_type", 
        action="store_const", 
        const="xml",
        help="Dump sorce xml tree to standard output"
    )
    parser_dump.add_argument(
        "-y", 
        "--yaml", 
        dest="data_type", 
        action="store_const", 
        const="yaml",
        help="Dump source yaml to standard output"
    )
    parser_dump.add_argument(
        "-r",
        "--raw",
        dest="data_type",
        action="store_const",
        const="raw",
        help="Dump source data in its raw format"
    )

    # recipe_tool export
    parser_export = subparser.add_parser(
        "export",
        help="Export recipes in xml format"
    )
    parser_export.add_argument(
        "source",
        help="Sorce file to export"
    ).completer = recipe_completer
    parser_export.add_argument(
        "-o",
        "--output-dir",
        dest="output_dir",
        type=str,
        nargs="?",
        help="Choose a directory to output xml file"
    )
    parser_export.add_argument(
        "-x",
        "--xml",
        dest="xml",
        action='store_true',
        help="Export file in xml format"
    )
    parser_export.add_argument(
        "-r",
        "--recipe",
        dest="recipe",
        action='store_true',
        help="Export recipe file"
    )
    
    # recipe_tool fetch
    parser_fetch = subparser.add_parser(
        "fetch",
        help="Fetch a recipe from a website. \
              (currently only supports www.geniuskitch.com, more to come)"
    )
    parser_fetch.add_argument(
        "url",
        help="url of recipe to fetch"
    )
    parser_fetch.add_argument(
        "-s",
        "--save",
        action="store_true",
        help="Save file, default behaviour just prints recipe to stdout"
    )
    
    # auto completion	
    argcomplete.autocomplete(parser)
    
    import sys	
    if len(sys.argv) == 1:
        sys.exit(parser.print_help())
    else:
        return parser.parse_args()

def main():
    """main entry point of recipe_tool"""
    args = parse_args()
    import pyrecipe.argfuncs as argfunc
    action = {
            'gui': argfunc.start_gui,
            'version': argfunc.version,
            'print': argfunc.print_recipe,
            'list': argfunc.print_list,
            'edit': argfunc.edit_recipe,
            'add': argfunc.add_recipe,
            'remove': argfunc.delete_recipe,
            'shop': argfunc.print_shopping_list,
            'show': argfunc.show_stats,
            'dump': argfunc.dump_data,
            'export': argfunc.export_recipes,
            'fetch': argfunc.fetch_recipe
            }
    if args.guimode:
        action['gui']()
    if args.version:
        action['version'](args)
    else:
        action[args.subparser](args)
            
if __name__ == '__main__':
    main()
    

