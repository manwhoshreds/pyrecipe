#!/usr/bin/env python
# -*- encoding: UTF-8 -*-

import os
import sys
import argparse

import pyrecipe.recipe as recipe


def print_shopping_list(menu_items):
	
	sl = recipe.ShoppingList()
	
	for item in menu_items:
		sl.update(item)
			
	sl.print_list()

def print_random_shopping_list(random_count):
	rr = recipe.ShoppingList()
	rr.random_recipes(random_count)

def print_recipe(args):
	if args.name not in recipe.list_recipes(ret=True):
		print("No recipe found for {}".format(args.name))
	else:
		file_name = args.name.replace(" ", "_").lower() + ".recipe"
		abspath_file_name = recipe.RECIPE_DATA_DIR + file_name
		r = recipe.Recipe(abspath_file_name)
		r.print_recipe()
	

def parse_args():
	parser = argparse.ArgumentParser(
		description="recipe_tool *The Python recipe management program* \
		             Works with recipe files written in yaml.",
		add_help=False
	)
	
	parser.add_argument(
		"-h", "--help",
		action='help',
		help='Show this help message and quit'
		
	)
	parser.add_argument(
		"-a", 
		"--all", 
		dest="print_all", 
		action="store_true", 
		help="Print the recipe, yaml, and xml dump"
	)
	parser.add_argument(
		"-c", 
		"--check", 
		dest="check_file", 
		action="store_true", 
		help="Validate a recipe file"
	)
	parser.add_argument(
		"-d", 
		"--devel", 
		dest="devel", 
		action="store_true", 
		help="Used for development purposes only"
	)
	parser.add_argument(
		"-g",
		"--gui-mode",
		dest="gui_mode",
		action="store_true",
		help="Start pyrecipe in gui-mode."
	)
	parser.add_argument(
		"-o", 
		"--output-dir", 
		dest="output_dir", 
		metavar="DIR", 
		type=str,  
		help="Choose a directory to output written xml files."
	)
	parser.add_argument(
		"-r", 
		"--random", 
		nargs='?', 
		const=recipe.RAND_RECIPE_COUNT, 
		type=int , 
		metavar="NUM", 
		dest="random", 
		help="Pick n random recipes for the week"
	)
	parser.add_argument(
		"-v", 
		"--verbose", 
		dest="verbose_out", 
		action="count", 
		default=0,
		help="Verbose output. When used by itself, \
			  it prints the recipe with extra \
			  info such as cooking time and prep time.\
			  To increase verbosity, use -vv."
	)
	parser.add_argument(
		"-V", 
		"--version", 
		dest="version", 
		action="store_true", 
		help="Print version and exit"
	)
	parser.add_argument(
		"-w", 
		"--write-xml", 
		dest="write_xml", 
		action="store_true",
		help="Write the xml to file"
	)
	parser.add_argument(
		"-x", 
		"--xml-only", 
		dest="print_xml", 
		action="store_true", 
		help="Dump sorce xml tree to standard output"
	)
	parser.add_argument(
		"-y", 
		"--yaml-only", 
		dest="print_yaml", 
		action="store_true", 
		help="Dump source yaml to standard output"
	)
	parser.add_argument(
		"-z",
		"--shopping-list",
		nargs="*",
		dest="shopping_list",
		type=str,
		help="print a shopping list from menu items"
	)

	# subparsers start here
	subparser = parser.add_subparsers()

	# recipe_tool print
	parser_print = subparser.add_parser(
		"print",
		help="Print the recipe to screen"
	)
	parser_print.add_argument(
		"name",
		type=str,
		help="Recipe to print"
		)
	parser_print.set_defaults(func=print_recipe)
	
	# recipe_tool list
	parser_list = subparser.add_parser(
		"list",
		help="List recipes"
	)
	parser_list.set_defaults(func=recipe.list_recipes)

	# recipe_tool edit	
	parser_edit = subparser.add_parser(
		"edit",
		help="Use system editor to edit recipe data file"
	)
	parser_edit.add_argument(
		"recipe",
		help="Recipe to edit"
	)
	parser_edit.set_defaults(func=recipe.edit_recipe)

	# recipe_tool add
	parser_add = subparser.add_parser(
		"add",
		help='Add a recipe'
	)
	parser_add.set_defaults(func=recipe.template)

	# recipe_tool show
	parser_show = subparser.add_parser(
		"show",
		help='Show information about recipes'
	)
	parser_show.set_defaults(func=recipe.stats)
	
	
	# Print help if no arguments given
	if len(sys.argv) == 1:
		parser.print_help()
	
	return parser.parse_args()


def main():
	"""Main entry point of recipe_tool"""
	args = parse_args()

	

	if args.print_all:
		args.verbose_out = 2
		r.print_recipe()
		print("")
		print("")
		r.process_xml()
		print("")
		print("")
		r.print_yaml()
		exit(0)
	if args.shopping_list:
		menu_items = args.shopping_list
		print_shopping_list(menu_items)
		exit(0)
	if args.print_yaml:
		r.print_yaml()
		exit(0)
	if args.print_xml:
		r.process_xml()
		exit(0)
	if args.random:
		print_random_shopping_list(args.random)
		exit(0)
	if args.check_file:
		r.check_file()
		exit(0)
	if args.version:
		recipe.version()
		exit(0)
	if hasattr(args, 'func'):
		args.func(args)
		
if __name__ == '__main__':
	main()
